// <auto-generated />
using System;
using Global.CarManagement.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Global.CarManagement.Infraestructure.Migrations
{
    [DbContext(typeof(CarManagementContext))]
    partial class CarManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Global.CarManagement.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("TB_BRAND", (string)null);
                });

            modelBuilder.Entity("Global.CarManagement.Domain.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BRAND_ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DT_CREATE");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DETAILS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PHOTO_ID");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("PRICE");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DT_UPDATE");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("PhotoId");

                    b.ToTable("TB_CAR", (string)null);
                });

            modelBuilder.Entity("Global.CarManagement.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Base64")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("BASE64");

                    b.HasKey("Id");

                    b.ToTable("TB_PHOTO", (string)null);
                });

            modelBuilder.Entity("Global.CarManagement.Domain.Entities.Car", b =>
                {
                    b.HasOne("Global.CarManagement.Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.CarManagement.Domain.Entities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Photo");
                });
#pragma warning restore 612, 618
        }
    }
}
